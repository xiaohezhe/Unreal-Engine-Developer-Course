/*
This is the console executable, that makes use of the BullCow class
This acts as the view in a MVC pattern, and is responsible for all 
user interaction. For game logic see the FBullCowGame class.
*/

#pragma once

#include <iostream>
#include <string> 
#include "FBullCowGame.h" 
//#include "main.h" //save the function declaration
//importing standard stuff using angular brackets
//importing my own codes using quotes

/**********************************************************************************************************************************************/
/**********************************************************************************************************************************************/
/*TODO 功能可以标记木有完成的功能在Task list 里显示*/

//to make sytax Ureal fridendly
using FText = std::string;
using int32 = int;

//function prototypes as outside a class
void PrintIntro();//function is defined after main, need to declare here first
void PlayGame();
FText GetValidGuess();
bool AskToPlayAgain();
void PrintGameSummary();


//instantiate a new game, which we re-use across plays
FBullCowGame BCGame;

//the entry point for our application
int main()
{

	bool bPlayAgain = false;
	do {
		PrintIntro();
		PlayGame();
		bPlayAgain = AskToPlayAgain();
		}
	while(bPlayAgain);//如果符合while括号里的条件会一直执行do括号里的语句

	return 0;//exit the application
}

template <typename Enumeration>
auto as_integer(Enumeration const value)
-> typename std::underlying_type<Enumeration>::type
{
	return static_cast<typename std::underlying_type<Enumeration>::type>(value);
}

void PlayGame()//the fuction is generated by the "extract function" tool derectly, the funciton declaration is automatically in  main.h file
{
	BCGame.Reset();

	int32 MaxTries = BCGame.GetMaxTries();

	//loop for guesses while the game 
	//is NOT won and there are still tries remaining
	while (!BCGame.IsGameWon() && BCGame.GetCurrentTry() <= MaxTries)
	{
		FText Guess = GetValidGuess();

		//Submit valid guess to the game and receive counts
		FBullCowCount BullCowCount = BCGame.SubmitValidGuess(Guess);

		//Print number of bulls and cows
		std::cout << "Bulls = " << BullCowCount.Bulls;
		std::cout << ". Cows = " << BullCowCount.Cows << "\n\n";

	}

	// summarise game
	PrintGameSummary();
	return;
}

void PrintIntro()
{
	//introduce the game
	//constexpr int32 WORLD_LENGTH = 10;//constant expression called WORLD_LENGTH
	std::cout << "\n\nWelcome to Bulls and Cows, a fun word game." << std::endl;
	std::cout << std::endl;
	std::cout << "          }   {         ___ " << std::endl;
	std::cout << "          (o o)        (o o) " << std::endl;
	std::cout << "   /-------\\ /          \\ /-------\\ " << std::endl;
	std::cout << "  / | BULL |O            O| COW  | \\ " << std::endl;
	std::cout << " *  |-,--- |              |------|  * " << std::endl;
	std::cout << "    ^      ^              ^      ^ " << std::endl;
	std::cout << "Can you guess the " << BCGame.GetHiddenWordLength();
	std::cout << " letter isogram I am thinking of?" << std::endl;
	std::cout << std::endl;
	return;
}

//loop continually until the user gives a valid guess
FText GetValidGuess()
{
	EGuessStatus Status = EGuessStatus::Invalid_Status;
	FText Guess = " ";//initialize FText as null

	do {
		int32 CurrentTry = BCGame.GetCurrentTry();
		//get a guess from the player
		
		std::cout << "Try " << CurrentTry << " of " << BCGame.GetMaxTries();
		std::cout << ". Enter your guess?" << std::endl;
		std::getline(std::cin, Guess);//input can have space by using getline

		Status = BCGame.CheckGuessValidity(Guess);
		switch (Status)
		{
		case EGuessStatus::Wrong_Length:
			std::cout << "Please enter a " << BCGame.GetHiddenWordLength() << " letter word.\n" << std::endl;
			break;
		case EGuessStatus::Not_Isogram:
			std::cout << "Please enter a word without repeating letters.\n" << std::endl;
			break;
		case EGuessStatus::Not_Lowercase:
			std::cout << "Please enter all lowercase letters.\n" << std::endl;
			 break;
		default:
			// assume the guess is valid
			break;
			
		}
		
	} while (Status != EGuessStatus::OK);//keep looping until we get no errors
	return Guess;
}

bool AskToPlayAgain()
{
	std::cout << "Do you want to play it again with the same hidden word ?(y/n)" << std::endl;
	FText Response = "";
	std::getline(std::cin, Response);
	//std::cout << "First char: " << Response[0] << std::endl;
	//std::cout << "Is it yes? " << (Response[0] == 'y' || Response[0] == 'Y') << std::endl;
	return (Response[0] == 'y') || (Response[0] == 'Y');//如果输入第一个字母是y返回1否则都返回0
}
 

void PrintGameSummary()
{
	if (BCGame.IsGameWon())
	{
		std::cout << "WELL DONE - YOU WIN!\n";
	}
	else
	{
		std::cout << "Better luck next time!\n";
	}
	return;
}